parameters:
# this base set of packages should not be changed by calling script
# should be common across all pipelines
- name: baseAptPackages
  type: object
  default:
    - build-essential
    - ca-certificates
    - cmake
    - curl
    - file
    - git
    - gcc
    - g++
    - gpg
    - kmod
    - libdrm-dev
    - libelf-dev
    - libgtest-dev
    - libhsakmt-dev
    - libhwloc-dev
    - libnuma-dev
    - libstdc++-12-dev
    - libtbb-dev
    - lsb-release
    - lsof
    - ninja-build
    - pkg-config
    - python3-dev
    - python3-pip
    - wget
    - zip
# set to true if llvm-project is not downloaded in a particular call
# or if you just don't want the symlink
- name: skipLlvmSymlink
  type: boolean
  default: false
- name: aptPackages
  type: object
  default: []
- name: pipModules
  type: object
  default: []
- name: dockerVersion
  type: string
  default: '27.5.0'
# test environment involves gpu-related steps
- name: environment
  type: string
  default: build
  values:
    - build
    - test
- name: registerROCmPackages
  type: boolean
  default: false
- name: ROCmKeyringVersion
  type: string
  default: 6.3.1

trigger: none
pr: none

jobs:
- job: pipeline_debug
  timeoutInMinutes: 120
  variables:
  - group: common
  - template: /.azuredevops/variables-global.yml
  pool: ${{ variables.MEDIUM_BUILD_POOL }}
  workspace:
    clean: all
  steps:
  - checkout: self
#    persistCredentials: true
#  - script: |
      # Define Variables
#      ORGANIZATION="rocm-ci"  # Replace with your Azure DevOps organization name
#      PROJECT="ROCm-CI"  # Replace with your Azure DevOps project name
#      BUILD_ID=13459  # This is the build ID provided by the pipeline

      # Set the API URL to retrieve build details
#      API_URL1="https://dev.azure.com/${ORGANIZATION}/${PROJECT}/_apis/pipelines/145/runs/13459?api-version=6.0-preview.1"

#      echo "DEFINITIONS!!!"

      # Make the API call to get the build details (including commit hashes)
#      response1=$(curl -s -u :$(System.AccessToken) $API_URL1)
#      echo $response1

#      REPOS_COUNT=$(echo $response1 | jq '.resources.repositories | length')
#      echo "Found $REPOS_COUNT repositories in this run."

#      for (( i=0; i<$REPOS_COUNT; i++ ))
#      do
        # Extract the repository name and commit hash for each repository
#        REPO_NAME=$(echo $response1 | jq -r ".resources.repositories | keys | .[$i]")
#        REPO_COMMIT_HASH=$(echo $response1 | jq -r ".resources.repositories[\"$REPO_NAME\"].version")

        # Extract fullName, refName, and version (commit hash) for each repository
#        REPO_FULL_NAME=$(echo $response1 | jq -r ".resources.repositories | to_entries | .[$i].value.repository.fullName")
#        REPO_REF_NAME=$(echo $response1 | jq -r ".resources.repositories | to_entries | .[$i].value.refName")
#        REPO_COMMIT_HASH=$(echo $response1 | jq -r ".resources.repositories | to_entries | .[$i].value.version")

        # Print the repository details
#        echo "Repository $i:"
#        echo "  Full Name: $REPO_FULL_NAME"
#        echo "  Ref Name: $REPO_REF_NAME"
#        echo "  Commit Hash: $REPO_COMMIT_HASH"

        # below is example using github api
        # github_commit_response=$(curl "https://api.github.com/repos/ROCm/$REPO_NAME/commits/$REPO_COMMIT_HASH")

        # Extract and print relevant information from the GitHub commit response
        # COMMIT_MESSAGE=$(echo $github_commit_response | jq -r '.commit.message')
        # COMMIT_AUTHOR=$(echo $github_commit_response | jq -r '.commit.author.name')
        # echo "Commit message for $REPO_NAME: $COMMIT_MESSAGE"
        # echo "Commit author for $REPO_NAME: $COMMIT_AUTHOR"
#      done
#    displayName: 'Fetch Commit Details for Build'
#    env:
#      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
# install docker
  - task: Bash@3
    displayName: Install Docker
    inputs:
      workingDirectory: $(Pipeline.Workspace)
      targetType: inline
      script: |
        USER=$(whoami)
        echo "USER: $USER"
        getent group docker
        echo "GROUPS:"
        groups
        groups $USER
        docker info
        ls -l /var/run/docker.sock
